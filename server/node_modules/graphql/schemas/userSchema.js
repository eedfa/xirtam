const graphql = require('graphql')
const UserDBSchema = require('../mongoDBSchema/userSchema.js')
const { GraphQLObjectType, GraphQLInt, GraphQLString, GraphQLSchema } = graphql

const UserType = new GraphQLObjectType({

  name: 'UserName',
  fields: () => ({
    id: { type: GraphQLInt },
    name: { type: GraphQLString },
    email: { type: GraphQLString },
    passwordHash: { type: GraphQLString }

  })

})
/*
const RootQuery = new GraphQLObjectType({

  name: 'RootQuery',
  fields: {
    book: {
      type: UserType,
      args: { id: { type: GraphQLString } },
      resolve (parent, args) {
        // get data from DB
        // return _.find(books,{id: args.id});
        return Book.findById(args.id)
      }
    }
  }
})
*/
const Mutation = new GraphQLObjectType({

  name: 'Mutation',
  fields: {
    addUser: {
      type: UserType,
      args: {
        username: { type: GraphQLString },
        passwordHash: { type: GraphQLString },
        email: { type: GraphQLString }
      },
      resolve (parent, args) {
        let user = new UserDBSchema({
          name: args.username,
          passwordHash: args.passwordHash,
          email: args.email })

        return user.save()
      }
    }

  }

})
module.exports = new GraphQLSchema({
  query: UserType,
  mutation: Mutation

})
